************************************************
 Renesas Technology America, Inc.
 RZ/N Universal Build Script "build.sh"
 QUICK SYNTAX GUIDE
 Observe that download of Linux, Buildroot, etc is done sutomaticaly by UBS (build.sh).
************************************************

===================================
1. Unzip rzn1_linux_bsp.zip to your Linux host PC.
=================================
a). If you received USB package as a zip-file.
You should now see:
    build.sh*
    hello_world/
    patches-buildroot/
    patches-dfu-util/
    patches-uboot/
    setup_env.sh

b).GITHUB.
Create a username and password at https://github.com, and clone the git repo to access the RZN UBS. 
REA may need to share the repo with you.
$>cd .../rzn1_univ_build (or what you wish to name it.
$>git init
$>git clone https://github.com/renesas-rz/rzn1_linux_bsp.git
$>cd renesas-rz/rzn1_linux_bsp
$>git checkout -b rzn1-next-yourname v4.9
..

*** Now you can start building your system. ***
First make sure you are allowed to execute builds.
sudo chown -R username ./


===================================
2. Show build menu
===================================
>./build.sh         [shows menu]

===================================
3. Select target
===================================
>./build.sh config


===================================
4. Building Buildroot to get a filesystem. Will include Busybox.
===================================
>./build.sh buildroot menuconfig    [Only if you want to change something.]
Build the root file system:
>./build.sh buildroot
Specifically we are interested in the rootfs.tar output:
~/RZ-N/rzn1_linux_bsp/output/buildroot-2017.02/output/images/rootfs.tar
See rzn-u-boot-guide.txt how to use.


===================================
5. Build kernel
(See 9. for download)
===================================
>./build.sh kernel menuconfig         [If you want to change something.]
>./build.sh kernel
>./build.sh kernel uImage
The kernel 'uImage' is now in ../output/rzn1_linux/arch/arm/boot/
5.b. build script #2 XXXXXXXXXXX


===================================
6. Build device tree. 
===================================
>./build.sh kernel rzn1d400-db.dtb
To edit the Device Tree and add U-boot commands and boot-args  (instead of typing into the RZ/N terminal).
>vim output/rzn1_linux/arch/arm/boot/dts/rzn1d400-db.dts
Add this line right after   chosen {
bootargs = "console=ttyS0,115200 earlyprintk debug rdinit=/linuxrc root=/dev/mmcblk0p1 rootwait                                                                       ";
Changing this default fdt chosen struct using bootargs  is explained in "Adding MMC experimentally" in rzn-rea-uboot-guide.txt.


===================================
8. Build U-Boot
===================================
- - Following RZN1-U-Boot-User-Manual, R01US0296EG0103a - -
>sudo apt-get install device-tree-compiler
>git clone http://git.denx.de/u-boot.git
>cd u-boot
>git checkout -b rzn1 v2017.01
>BSP_VERSION=v1.4.x
>git remote add renesas-rz https://github.com/renesas-rz/rzn1_u-boot.git
>git fetch --tags renesas-rz
>git merge rzn1-public-$BSP_VERSION
>make rzn1d400-db_config
(>make menuconfig)
make

You should stick to the Renesas released binary to start with as it is tailored for the board and should be ok. If needed you can build U-boot (for example to change the serial port clock settings).
>$./build.sh u-boot
The output is in ./output/u-boot/u-boot.bin 
You'll need to convert it to an spkg image. See the Linux & U-boot guide, but here is example
>$cd ~/RZ-N/rzn1_linux_bsp/output/u-boot/
>$~/RZ-N/YCONNECT-IT-RZN/Software/U-Boot-and-Linux/u-boot/binaries/spkg_utility -i ./u-boot.bin -o  ./u-boot-rzn1db400-rea-47619047.spkg --padding 64K --load_address 0x200a0000 --nand_ecc_enable --nand_ecc_blksize 1 --nand_ecc_scheme 1 --nand_bytes_per_ecc_block 7 --add_dummy_blp
Download the new U-boot image to SRAM. (Hold SW5, press SW3.)
>sudo dfu-util -D ~/RZ-N/rzn1_linux_bsp/output/u-boot/u-boot-rzn1db400-rea-jan30.spkg
Flash it to serial QSPI.
=> dfu
$>sudo dfu-util -a 'sf_spl' -D ~/RZ-N/rzn1_linux_bsp/output/u-boot/u-boot-rzn1db400-rea-jan30.spkg


-----------------------------------------------------------------------------------------------------------------
For more info on managing your system with U-boot, see rzn-rea#2-uboot-guide.txt.
-----------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------
A few notes on how build.sh works.
    - The config file rzn1_defconfig for a kernel build is only used if you do not have a .config file for linux already. (build.sh ~line 357). After you clone a repository, you will not have a .config (because a .config file is not something you check into a source repository). If you do a "make clean", it will keep the .config file. but if you do a "make distclean", it will be deleted 
    - In the same way, rzn1_defconfig for Buildroot build is only used if you do not have a .config file for Buildroot already.
    - Chris Brandt made rzn1_defconfig for Buildroot.
    - Patches are only applied the very first time you clone and build the code. The patch sets are applied as follows.
        1. U-boot: only applied the very first time after cloning.
        2. Kernel: only applied the very first time after cloning.
        3. Buildroot add rzn support: only applied the very first time after cloning.
        4. Buildroot generic updates: checks each time you build because if there is an update to buildroot, this will fix it up.
        Therefore, to get the latest patches, delete the output folders
            ../rzn1_linux_bsp/output/rzn1_linux/
            ../rzn1_linux_bsp/output/buildroot-2017.02/
    - You can ignore the output..
                ./build.sh: line 630: /home/sven/RZ-N/rzn1_linux_bsp/patches-buildroot/buildroot-2017.02/renesas_*.patch: No such file or directory.
        ..as these are extra patches in case you have anything specific to put into the ./patches-buildroot folder.
    - It is not dangerous to use an old .config in a newer version (no incompatibility risk) because updates to the kernel will not mean moving from 4.9 to 4.10/11/12,etc.. it will just be updates to drivers and such. So copying over an old  .config is fine. 
-----------------------------------------------------------------------------------------------------------------

Build your own app
===========
See README.TXT
Don't go to the location of the code you want to build. Go to where build.sh script is to set everything up for Buildroot etc. For example:
>cd ~/RZ-N/rzn1_linux_bsp
>./build.sh env 
>export ROOTDIR=$(pwd) ; source ./setup_env.sh
>echo $BUILDROOT_DIR

Example (hello_world):
>cd hello_world/
>make
>file hello

Example (GOAL):
>cd /media/sf_rzn1_linux_bsp_vbox
>./build.sh env
NOW go to where the goal project you want to build is. Example: 
>cd /media/sf_YCONNECT-IT-RZN_V1.3/Software/GOAL/goal/projects/goal_pnio_rpc_lib/appl/01_simple_io/gcc
>make
Problems may come up due to permissions being lost when files were copied from Windows. Fix that. Change permissions with e.g.
>sudo chmod u+x ../../filename
>sudo chown -R sven ~/RZ-N/YCONNECT-IT-RZN_V1.x
You may need to add things like
#define RENESAS_CFG_BOARD_RZN1EB 1
in goal_config.h.
When the build is done, create the folder in the Buildroot where additional user files are to be placed. Let's use /usr/bin for that in this example.
>mkdir -p $BUILDROOT_DIR/output/rootfs_overlay/usr/bin
Copy the binary into the tree. Remember, it is pointless to put any CM3 core binaries here. They need to be downloaded separately to QSPI. See "CM3 image download" section.
>cp ./build/goal/goal_rzn_a7_demo_board.bin $BUILDROOT_DIR/output/rootfs_overlay/usr/bin
Now follow "Build the root file system".


GDB:
===
Only reason to use GDB at this point is to debug U-boot for a new customer board. To debug apps running under linux is a different story.
1. Install the openocd linux package.
2. Ensure switch SW2-6 is OFF and switch W1 is OFF, i.e. away from the white bar.
3. Start gdbserver
>openocd -f /home/sven/RZ-N/YCONNECT-IT-RZN_V1.1/Software/Linux/debugger/renesas-rzn1-openocd.cfg
You should see something like
        Open On-Chip Debugger 0.9.0 (2015-09-02-10:42)
        ....
        TargetName         Type       Endian TapName            State       
        --  ------------------ ---------- ------ ------------------ ------------
        0  rzn1.cpu.1         cortex_a   little rzn1.dap           running
        1* rzn1.cpu.0         cortex_a   little rzn1.dap           halted
4. Run the client in anothe window.
>arm-linux-gnueabihf-gdb -tui u-boot
[>../rzn1_linux_bsp/output/buildroot-2017.02/output/host/opt/ext-toolchain/bin/arm-linux-gnueabihf-gdb -tui u-boot]
target remote localhost:3333
...


OTHER
====
